// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String                @id @default(uuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  pages                Page[]
  Integration          Integration[]
  Theme                Theme[]
  isAdmin              Boolean               @default(false)
  acceptedInviteAt     DateTime?
  assignedInviteCodes  InviteCode[]          @relation("AssignedInviteCodes")
  claimedInvitedCodes  InviteCode[]          @relation("ClaimedInviteCodes")
  teamId               String?
  teams                TeamUser[]
  plan                 String                @default("free")
  stripeCustomerId     String?
  stripeSubscriptionId String?
  hasPremiumAccess     Boolean               @default(false)
  hasTeamAccess        Boolean               @default(false)
  hasBetaAccess        Boolean               @default(false)
  verificationRequests VerificationRequest[]
}

model Team {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  pages        Page[]
  members      TeamUser[]
  integrations Integration[]
  isPersonal   Boolean       @default(true)
  invites      TeamInvite[]
  themes       Theme[]
}

model TeamUser {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  teamId         String
  team           Team         @relation(fields: [teamId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  claimedInvites TeamInvite[] @relation("ClaimedInvites")
}

model Page {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  publishedAt          DateTime?
  deletedAt            DateTime?
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  slug                 String                @unique
  config               Json
  mobileConfig         Json?
  blocks               Block[]
  metaTitle            String?
  metaDescription      String?
  themeId              String?
  theme                Theme?                @relation(fields: [themeId], references: [id])
  backgroundImage      String?
  customDomain         String?               @unique
  team                 Team?                 @relation(fields: [teamId], references: [id])
  teamId               String?
  verifiedAt           DateTime?
  verificationRequests VerificationRequest[]
}

model Block {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id])
  pageId    String
  type      String
  config    Json
  data      Json
  contentStyles Json
}

model Integration {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  teamId          String?
  team            Team?     @relation(fields: [teamId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  type            String
  config          Json
  encryptedConfig String?
  deletedAt       DateTime?
}

model Theme {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  name                String   @default("")
  isDefault           Boolean  @default(false)
  createdById         String
  createdBy           User     @relation(fields: [createdById], references: [id])
  colorBgBase         Json?
  colorBgPrimary      Json?
  colorBgSecondary    Json?
  colorBorderPrimary  Json?
  colorLabelPrimary   Json?
  colorLabelSecondary Json?
  colorLabelTertiary  Json?
  pages               Page[]
  teamId              String?
  team                Team?    @relation(fields: [teamId], references: [id])
}

model InviteCode {
  id           String   @id @default(uuid())
  code         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignedToId String
  assignedTo   User?    @relation("AssignedInviteCodes", fields: [assignedToId], references: [id])
  claimedById  String?
  claimedBy    User?    @relation("ClaimedInviteCodes", fields: [claimedById], references: [id])
}

model TeamInvite {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  email       String
  code        String    @unique @default(uuid())
  expiresAt   DateTime
  claimedAt   DateTime?
  claimedBy   TeamUser? @relation("ClaimedInvites", fields: [claimedById], references: [id])
  claimedById String?
}

enum VerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model VerificationRequest {
  id                 String                    @id @default(uuid())
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  pageId             String
  page               Page                      @relation(fields: [pageId], references: [id])
  status             VerificationRequestStatus @default(PENDING)
  requestedByUserId  String
  requestedBy        User                      @relation(fields: [requestedByUserId], references: [id])
  rejectedReason     String?
  verifiedAt         DateTime?
  rejectedAt         DateTime?
  requestedPageTitle String
}
